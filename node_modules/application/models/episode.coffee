youtube = require('youtube-get')(process.env.YOUTUBE_API_KEY)

fetchChannelSection = (id, cb) ->
  apiParams =
    'part': 'id,snippet,contentDetails'
    'id': id
  youtube 'channelSections', apiParams, (err, data) -> cb(data.items[0])

fetchPlaylists = (playlistIds, cb) ->
  apiParams =
    'id': playlistIds.join(',')
    'part': 'id,snippet,status,contentDetails'
  youtube 'playlists', apiParams, (err, data) -> cb(data.items)

fetchPlaylistItems = (playlistId, cb) ->
  apiParams =
    'playlistId': playlistId
    'part': 'id,snippet,status,contentDetails'
    'maxResults': 50
  youtube 'playlistItems', apiParams, (err, data) -> cb(data)

createEpisodeFromPlaylist = (playlist) ->
  episode =
    'id': playlist.id
    'publishedAt': playlist.snippet.publishedAt
    'title': playlist.snippet.title ? ''
    'description': playlist.snippet.description ? ''
    'thumbnails': playlist.snippet.thumbnails ? {}
    'resourceType': 'playlist'

createEpisodeFromPlaylistItem = (playListItem) ->
  episodeNumber = playListItem.snippet.title.match(/episode\s(\d)/i)[1]
  episode =
    'id': playListItem.id
    'number': parseInt(episodeNumber, 10)
    'urlName': "episode-#{episodeNumber}"
    'publishedAt': playListItem.snippet.publishedAt
    'title': playListItem.snippet.title
    'description': playListItem.snippet.description
    'thumbnails': playListItem.snippet.thumbnails
    'resourceType': 'playlistItem'
    'videoId': playListItem.contentDetails.videoId

createEpisodesFromData = (playlists, cb) ->

  episodes = []

  # If there is a single playlist then episodes are playlistitems
  if playlists.length is 1
    await fetchPlaylistItems(playlists[0].id, defer(playlistItemData))
    for playlistItem in playlistItemData.items
      episodes.push(createEpisodeFromPlaylistItem(playlistItem))

  # Otherwise we have multiple playlists in the channel section and
  # episodes are playlists
  else
    for playlist in playlists
      episodes.push(createEpisodeFromPlaylist(playlist))

  cb(episodes)

addAdditionalEpisodeDetail = (episode, cb) ->
  apiParams =
    part: 'id,snippet,contentDetails,player,statistics,status,recordingDetails'
    id: episode.videoId
  youtube 'videos', apiParams, (err, data) ->
    episode.publishedAt = data.items[0].snippet.publishedAt
    episode.html = data.items[0].player.embedHtml
    episode.views = data.items[0].statistics.viewCount
    episode.likes = data.items[0].statistics.likeCount
    episode.dislikes = data.items[0].statistics.dislikeCount
    episode.favorites = data.items[0].statistics.favoriteCount
    episode.commentCount = data.items[0].statistics.commentCount
    episode.duration = data.items[0].contentDetails.duration
    episode.dimension = data.items[0].contentDetails.dimension
    episode.definition = data.items[0].contentDetails.definition
    cb(episode)

findAllByShowId = (showId, cb) ->
  # Fetch data
  await fetchChannelSection(showId, defer(channelSectionData))
  playlistIds = channelSectionData.contentDetails.playlists
  await fetchPlaylists(playlistIds, defer(playlistData))
  # Format data
  await createEpisodesFromData(playlistData, defer(episodes))
  # Return data
  cb(episodes)

module.exports =
  findAllByShowId: (showId, cb) ->
    findAllByShowId(showId, cb)
  findByShowIdAndEpisodeId: (showId, episodeId, cb) ->
    await findAllByShowId showId, defer(episodes)
    baseEpisode = null
    for episode in episodes
      if episode.id is episodeId then baseEpisode = episode
    if baseEpisode?
      await addAdditionalEpisodeDetail(baseEpisode, defer(completeEpisode))
    cb(completeEpisode)
  findByShowIdAndEpisodeNumber: (showId, episodeNumber, cb) ->
    await findAllByShowId showId, defer(episodes)
    baseEpisode = null
    for episode in episodes
      if episode.number is parseInt(episodeNumber, 10) then baseEpisode = episode
    if baseEpisode?
      await addAdditionalEpisodeDetail(baseEpisode, defer(completeEpisode))
    cb(completeEpisode)
